plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	// Node Plugin to build the front end
	id "com.moowork.node" version "1.3.1"
}

group = 'com.romano'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-mail'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
//	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}


// do npm install, then make a production build, then copy that build to the static resources folder
// -----Start-----
node {
	download = false
}

task nodeBuild(type: NpmTask) {
	description = "Creating a production build of the frontend."
	workingDir = file("${project.projectDir}/frontend")
	args = ['run', 'build']
}

task copyTask(type: Copy) {
	from 'frontend/build'
	into 'build/resources/main/static'
}
nodeBuild.dependsOn(npm_install)
copyTask.dependsOn(nodeBuild)
build.dependsOn(copyTask)
// -----End-----
